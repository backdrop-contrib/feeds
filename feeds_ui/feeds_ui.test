<?php

/**
 * @file
 * Tests for Feeds Admin UI module.
 */

/**
 * Test basic Feeds UI functionality.
 */
class FeedsUIUserInterfaceTestCase extends FeedsWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Feeds UI user interface',
      'description' => 'Tests Feeds Admin UI module\'s GUI.',
      'group' => 'Feeds',
    );
  }

  public function setUp() {
    parent::setUp(array('php'), array('use PHP for settings'));
  }

  /**
   * UI functionality tests on
   * feeds_ui_overview(),
   * feeds_ui_create_form(),
   * Change plugins on feeds_ui_edit_page().
   */
  public function testEditFeedConfiguration() {

    // Create an importer.
    $this->createImporterConfiguration('Test feed', 'test_feed');

    // Assert UI elements.
    $this->backdropGet('admin/structure/feeds/test_feed');
    $this->assertText('Basic settings');
    $this->assertText('Fetcher');
    $this->assertText('HTTP Fetcher');
    $this->assertText('Parser');
    $this->assertText('Common syndication parser');
    $this->assertText('Processor');
    $this->assertText('Node processor');
    $this->assertText('Getting started');
    $this->assertRaw('admin/structure/feeds/test_feed/settings');
    $this->assertRaw('admin/structure/feeds/test_feed/settings/FeedsNodeProcessor');
    $this->assertRaw('admin/structure/feeds/test_feed/fetcher');
    $this->assertRaw('admin/structure/feeds/test_feed/parser');
    $this->assertRaw('admin/structure/feeds/test_feed/processor');
    $this->backdropGet('import');
    $this->assertText('Basic page');

    // Select some other plugins.
    $this->backdropGet('admin/structure/feeds/test_feed');

    $this->clickLink('Change', 0);
    $this->assertText('Select a fetcher');
    $edit = array(
      'plugin_key' => 'FeedsFileFetcher',
    );
    $this->backdropPost('admin/structure/feeds/test_feed/fetcher', $edit, 'Save');

    $this->clickLink('Change', 1);
    $this->assertText('Select a parser');
    $edit = array(
      'plugin_key' => 'FeedsCSVParser',
    );
    $this->backdropPost('admin/structure/feeds/test_feed/parser', $edit, 'Save');

    $this->clickLink('Change', 2);
    $this->assertText('Select a processor');
    $edit = array(
      'plugin_key' => 'FeedsUserProcessor',
    );
    $this->backdropPost('admin/structure/feeds/test_feed/processor', $edit, 'Save');

    // Assert changed configuration.
    $this->assertPlugins('test_feed', 'FeedsFileFetcher', 'FeedsCSVParser', 'FeedsUserProcessor');

    // Delete importer.
    $this->backdropPost('admin/structure/feeds/test_feed/delete', array(), 'Delete');
    $this->backdropGet('import');
    $this->assertNoText('Test feed');

    // Create the same importer again.
    $this->createImporterConfiguration('Test feed', 'test_feed');

    // Test basic settings settings.
    $edit = array(
      'name' => 'Syndication feed',
      'content_type' => 'page',
      'import_period' => 3600,
    );
    $this->setSettings('test_feed', NULL, $edit);

    // Assert results of change.
    $this->assertText('Syndication feed');
    $this->assertText('Your changes have been saved.');
    $this->assertText('Attached to: Basic page');
    $this->assertText('Periodic import: every 1 hour');
    $this->backdropGet('admin/structure/feeds');
    $this->assertLink('Basic page');

    // Configure processor.
    $this->setSettings('test_feed', 'FeedsNodeProcessor', array('bundle' => 'article'));
    $this->assertFieldByName('bundle', 'article');

    // Create a feed node.
    $edit = array(
      'title' => 'Development Seed',
      'feeds[FeedsHTTPFetcher][source]' => $GLOBALS['base_url'] . '/' . backdrop_get_path('module', 'feeds') . '/tests/feeds/developmentseed.rss2',
      );
    $this->backdropPost('node/add/page', $edit, 'Save');
    $this->assertText('Basic page Development Seed has been created.');

    // @todo Refreshing/deleting feed items. Needs to live in feeds.test
  }

}
